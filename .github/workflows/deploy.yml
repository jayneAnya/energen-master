name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

env:
  AWS_REGION: us-east-1
  AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set ECR Registry URL
        run: echo "AWS_ECR_REGISTRY_URL=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.AWS_ECR_REGISTRY_URL }}/${{ env.AWS_ECR_REPOSITORY }}:${{ github.sha }}

      - name: Scan Docker image with Trivy (Fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.AWS_ECR_REGISTRY_URL }}/${{ env.AWS_ECR_REPOSITORY }}:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
          exit-code: 1

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Deploy on EC2 via SSH
        if: success()
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "=== Installing Docker & AWS CLI v2 ==="
            sudo apt-get update -y
            sudo apt-get install -y unzip curl ca-certificates gnupg lsb-release

            # Install Docker CE
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update -y
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

            sudo groupadd docker || true
            sudo usermod -aG docker ubuntu

            # Install AWS CLI v2
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install || true
            rm -rf aws awscliv2.zip

            echo "=== Logging in to ECR ==="
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ECR_REGISTRY_URL }}

            echo "=== Exporting environment variables ==="
            export AWS_REGION=${{ env.AWS_REGION }}
            export AWS_ACCOUNT_ID=${{ env.AWS_ACCOUNT_ID }}
            export AWS_ECR_REPOSITORY=${{ env.AWS_ECR_REPOSITORY }}
            export IMAGE_TAG=${{ github.sha }}
            export GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}

            echo "=== Pulling new image ==="
            docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$AWS_ECR_REPOSITORY:$IMAGE_TAG

            echo "=== Deploying with docker compose ==="
            docker compose -f /home/ubuntu/docker-compose-ecr.yml down
            docker compose -f /home/ubuntu/docker-compose-ecr.yml up -d --remove-orphans
